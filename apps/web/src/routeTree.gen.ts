/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as containerRouteRouteImport } from './routes/(container)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as containerStudyRouteImport } from './routes/(container)/study'
import { Route as containerSettingsRouteImport } from './routes/(container)/settings'
import { Route as containerOverviewRouteImport } from './routes/(container)/overview'
import { Route as containerImportRouteImport } from './routes/(container)/import'
import { Route as containerGamesRouteImport } from './routes/(container)/games'
import { Route as containerAnalyzeRouteImport } from './routes/(container)/analyze'

const containerRouteRoute = containerRouteRouteImport.update({
  id: '/(container)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const containerStudyRoute = containerStudyRouteImport.update({
  id: '/study',
  path: '/study',
  getParentRoute: () => containerRouteRoute,
} as any)
const containerSettingsRoute = containerSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => containerRouteRoute,
} as any)
const containerOverviewRoute = containerOverviewRouteImport.update({
  id: '/overview',
  path: '/overview',
  getParentRoute: () => containerRouteRoute,
} as any)
const containerImportRoute = containerImportRouteImport.update({
  id: '/import',
  path: '/import',
  getParentRoute: () => containerRouteRoute,
} as any)
const containerGamesRoute = containerGamesRouteImport.update({
  id: '/games',
  path: '/games',
  getParentRoute: () => containerRouteRoute,
} as any)
const containerAnalyzeRoute = containerAnalyzeRouteImport.update({
  id: '/analyze',
  path: '/analyze',
  getParentRoute: () => containerRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof containerRouteRouteWithChildren
  '/analyze': typeof containerAnalyzeRoute
  '/games': typeof containerGamesRoute
  '/import': typeof containerImportRoute
  '/overview': typeof containerOverviewRoute
  '/settings': typeof containerSettingsRoute
  '/study': typeof containerStudyRoute
}
export interface FileRoutesByTo {
  '/': typeof containerRouteRouteWithChildren
  '/analyze': typeof containerAnalyzeRoute
  '/games': typeof containerGamesRoute
  '/import': typeof containerImportRoute
  '/overview': typeof containerOverviewRoute
  '/settings': typeof containerSettingsRoute
  '/study': typeof containerStudyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(container)': typeof containerRouteRouteWithChildren
  '/(container)/analyze': typeof containerAnalyzeRoute
  '/(container)/games': typeof containerGamesRoute
  '/(container)/import': typeof containerImportRoute
  '/(container)/overview': typeof containerOverviewRoute
  '/(container)/settings': typeof containerSettingsRoute
  '/(container)/study': typeof containerStudyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/analyze'
    | '/games'
    | '/import'
    | '/overview'
    | '/settings'
    | '/study'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/analyze'
    | '/games'
    | '/import'
    | '/overview'
    | '/settings'
    | '/study'
  id:
    | '__root__'
    | '/'
    | '/(container)'
    | '/(container)/analyze'
    | '/(container)/games'
    | '/(container)/import'
    | '/(container)/overview'
    | '/(container)/settings'
    | '/(container)/study'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  containerRouteRoute: typeof containerRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(container)': {
      id: '/(container)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof containerRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(container)/study': {
      id: '/(container)/study'
      path: '/study'
      fullPath: '/study'
      preLoaderRoute: typeof containerStudyRouteImport
      parentRoute: typeof containerRouteRoute
    }
    '/(container)/settings': {
      id: '/(container)/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof containerSettingsRouteImport
      parentRoute: typeof containerRouteRoute
    }
    '/(container)/overview': {
      id: '/(container)/overview'
      path: '/overview'
      fullPath: '/overview'
      preLoaderRoute: typeof containerOverviewRouteImport
      parentRoute: typeof containerRouteRoute
    }
    '/(container)/import': {
      id: '/(container)/import'
      path: '/import'
      fullPath: '/import'
      preLoaderRoute: typeof containerImportRouteImport
      parentRoute: typeof containerRouteRoute
    }
    '/(container)/games': {
      id: '/(container)/games'
      path: '/games'
      fullPath: '/games'
      preLoaderRoute: typeof containerGamesRouteImport
      parentRoute: typeof containerRouteRoute
    }
    '/(container)/analyze': {
      id: '/(container)/analyze'
      path: '/analyze'
      fullPath: '/analyze'
      preLoaderRoute: typeof containerAnalyzeRouteImport
      parentRoute: typeof containerRouteRoute
    }
  }
}

interface containerRouteRouteChildren {
  containerAnalyzeRoute: typeof containerAnalyzeRoute
  containerGamesRoute: typeof containerGamesRoute
  containerImportRoute: typeof containerImportRoute
  containerOverviewRoute: typeof containerOverviewRoute
  containerSettingsRoute: typeof containerSettingsRoute
  containerStudyRoute: typeof containerStudyRoute
}

const containerRouteRouteChildren: containerRouteRouteChildren = {
  containerAnalyzeRoute: containerAnalyzeRoute,
  containerGamesRoute: containerGamesRoute,
  containerImportRoute: containerImportRoute,
  containerOverviewRoute: containerOverviewRoute,
  containerSettingsRoute: containerSettingsRoute,
  containerStudyRoute: containerStudyRoute,
}

const containerRouteRouteWithChildren = containerRouteRoute._addFileChildren(
  containerRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  containerRouteRoute: containerRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
